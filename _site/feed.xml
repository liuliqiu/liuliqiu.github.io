<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>A blog about algorithm and game</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 28 Nov 2016 01:07:07 +0800</pubDate>
    <lastBuildDate>Mon, 28 Nov 2016 01:07:07 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>python多任务库 concurrent.futures</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/concurrent.futures.html&quot;&gt;concurrent.futures&lt;/a&gt;是在[python 3.2][What’s New In Python 3.2]中加入到python标准库中的，不过在python2中也可以[安装使用][pupi futures]。&lt;br /&gt;
&lt;a href=&quot;https://docs.python.org/3/library/concurrent.futures.html&quot;&gt;concurrent.futures&lt;/a&gt;提供了管理线程和进程一致的接口&lt;br /&gt;
这个库主要从&lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/package-summary.html&quot;&gt;java.util.concurrent&lt;/a&gt;包中得到灵感&lt;/p&gt;

&lt;h3 id=&quot;executor&quot;&gt;Executor&lt;/h3&gt;
&lt;p&gt;Executor是一个抽象基类，它提供了一组管理并发的接口。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;submit(fn, *args, **kwargs)&lt;/code&gt;: 返回一个Future对象。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map(fn, *iterables, timeout=None, chunksize=1)&lt;/code&gt;: 提供了python内置的map函数一致的接口。chunksize用于ProcessPoolExcutor一次性提供多个数据给执行进程。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shutdown(wait=True)&lt;/code&gt;: 通知正在执行的任务释放资源，wait为False的时候会直接返回，不过Python程序会等到所有任务释放资源后才退出。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;futures库实现了Executor的两个子类ThreadPoolExecutor和ProcessPoolExecutor。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ThreadPoolExecutor: 因为&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-global-interpreter-lock&quot;&gt;GIL&lt;/a&gt;的限制，python中多线程不能完全发挥CPU的性能，所以ThreadPoolExecutor更适合I/O密集型的任务。&lt;/li&gt;
  &lt;li&gt;ProcessPoolExecutor: ProcessPoolExecutor使用了多进程，所以摆脱了&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-global-interpreter-lock&quot;&gt;GIL&lt;/a&gt;的限制，更适合CPU密集型的任务。但也因此只能使用&lt;a href=&quot;https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled&quot;&gt;pickable&lt;/a&gt;的函数和数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;future&quot;&gt;Future&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cancel()&lt;/code&gt;: 取消当前任务的执行，如果已经执行了或者不能取消时返回False，否则返回True。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cancelled()&lt;/code&gt;: 判断是否成功取消。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;running()&lt;/code&gt;: 判断是否正在运行。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;done()&lt;/code&gt;: 判断是否成功取消或者执行完毕。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;result(timeout=None)&lt;/code&gt;: 获取执行结果。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exception(timeout=None)&lt;/code&gt;: 获取执行中抛出的异常。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add_done_callback(fn)&lt;/code&gt;: 添加回调函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ascompletedfs-timeoutnone&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;as_completed(fs, timeout=None)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;接收一个Future序列，按完成顺序返回Future对象。&lt;/p&gt;
&lt;h3 id=&quot;waitfs-timeoutnone-returnwhenallcompleted&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wait(fs, timeout=None, return_when=ALL_COMPLETED)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;接收一个Future序列，返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;(done, not_done)&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;tuple&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;tornadotornadoconcurrent&quot;&gt;&lt;a href=&quot;http://www.tornadoweb.org/en/stable/concurrent.html&quot;&gt;tornado&lt;/a&gt;中的使用&lt;/h2&gt;
&lt;p&gt;tornado在&lt;a href=&quot;http://www.tornadoweb.org/en/stable/concurrent.html&quot;&gt;tornado.concurrent&lt;/a&gt;中实现了自定义的Future，和标准的Future有少许差别。不过tornado在处理异步程序时可以兼容标准库返回的Future对象。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AsyncHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@gen.coroutine&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 25 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/25/python-concurrent-futures/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/25/python-concurrent-futures/</guid>
        
        
      </item>
    
  </channel>
</rss>
